*Overriding Default Commands:
$docker run busybox ls
Busybx is a file system image. Inside it has ls, echo programs are part of busybox filesystem image. Hence, ls command will overwrite docker run command.

$docker run busybox ping google.com
--------------------------------------------
$docker ps
List all running containers
--------------------------------------------
$docker ps --all
List of all container that have ever started on our machine
--------------------------------------------
*Create a docker container and start the container
[parth@parth-Lenovo-Y40-70 ~]$ docker create hello-world
38bf11f53a60e34b1db023d8bb6ac0aeaf3aae4c8a46b4fc570e335040ee7a07
[parth@parth-Lenovo-Y40-70 ~]$ docker start 38bf11f53a60e34b1db023d8bb6ac0aeaf3aae4c8a46b4fc570e335040ee7a07
38bf11f53a60e34b1db023d8bb6ac0aeaf3aae4c8a46b4fc570e335040ee7a07
[parth@parth-Lenovo-Y40-70 ~]$ docker start -a 38bf11f53a60e34b1db023d8bb6ac0aeaf3aae4c8a46b4fc570e335040ee7a07
Hello from Docker!

Explanation:
Createion will place the image in container memory allocation area and will return the id. Docker start will start the actual process to run using that id.
---------------------------------------------

*Removing stopped containers
$docker system prune
---------------------------------------------
*Retrieving log outputs:
[parth@parth-Lenovo-Y40-70 ~]$ docker create hello-world
c3db5e5672bc13098d9916c9cdcdfcf3554b2ea0d84e78012243bab508aea5ba
[parth@parth-Lenovo-Y40-70 ~]$ docker start c3db5e5672bc13098d9916c9cdcdfcf3554b2ea0d84e78012243bab508aea5ba
c3db5e5672bc13098d9916c9cdcdfcf3554b2ea0d84e78012243bab508aea5ba
[parth@parth-Lenovo-Y40-70 ~]$ docker logs c3db5e5672bc13098d9916c9cdcdfcf3554b2ea0d84e78012243bab508aea5ba

Hello from Docker!

Note: Running logs does not re-run or re-start the container
----------------------------------------------

*Stopping or killing the container*

[parth@parth-Lenovo-Y40-70 ~]$ docker create busybox ping google.com
040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
[parth@parth-Lenovo-Y40-70 ~]$ docker start 040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
[parth@parth-Lenovo-Y40-70 ~]$ docker logs 040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
PING google.com (172.217.7.206): 56 data bytes
64 bytes from 172.217.7.206: seq=0 ttl=56 time=10.403 ms
64 bytes from 172.217.7.206: seq=1 ttl=56 time=14.105 ms
[parth@parth-Lenovo-Y40-70 ~]$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
040fcab03ada        busybox             "ping google.com"   2 minutes ago       Up 2 minutes                            gifted_jackson
[parth@parth-Lenovo-Y40-70 ~]$ docker stop 040fcab03ada
040fcab03ada
[parth@parth-Lenovo-Y40-70 ~]$ docker start 040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
[parth@parth-Lenovo-Y40-70 ~]$ docker logs 040fcab03ada53fcc3e6d5e56a680899fe5f1e5933db1b0e2985bfe48f386f9a
PING google.com (172.217.7.206): 56 data bytes
64 bytes from 172.217.7.206: seq=0 ttl=56 time=10.403 ms
64 bytes from 172.217.7.206: seq=1 ttl=56 time=14.105 ms
[parth@parth-Lenovo-Y40-70 ~]$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
040fcab03ada        busybox             "ping google.com"   3 minutes ago       Up 11 seconds                           gifted_jackson
[parth@parth-Lenovo-Y40-70 ~]$ docker kill 040fcab03ada
040fcab03ada

Note: 'Kill' command immidiately kills the process inside the container and shuts container down. While 'Stop' command stops the process inside the container - The process takes about 10sec to stop(some processes to stut down) before the container is killed.

---------------------------------------------------------------------------------

01/16/2020:
Start docker shell with exec command:
$docker exec -it <containerid> sh

OR

[parth@parth-Lenovo-Y40-70 ~]$ docker run -it busybox sh
/ # ls
bin   dev   etc   home  proc  root  sys   tmp   usr   var
/ # exit

--------------------------------------------------------------------------------


*Redis Installation(Not a docker command)*
[parth@parth-Lenovo-Y40-70 ~]$ sudo apt-get -y install redis-server
[sudo] password for parth: 
Reading package lists... Done
Processing triggers for ureadahead (0.100.0-16) ...
..........
[parth@parth-Lenovo-Y40-70 ~]$ sudo service redis-server status
redis-server is running
[parth@parth-Lenovo-Y40-70 ~]$ 
[parth@parth-Lenovo-Y40-70 ~]$ sudo service redis-server restart
Stopping redis-server: redis-server.
Starting redis-server: redis-server.

--------------------------------------------------------------------------------


*Create Docker Image*
Check Dockerfile

*BuildImage*
$docker build .
Successfully built 9bf851b7f83c
[parth@parth-Lenovo-Y40-70 RedisImage]$ docker run 9bf851b7f83c

--------------------------------------------------------------------------------------------------












